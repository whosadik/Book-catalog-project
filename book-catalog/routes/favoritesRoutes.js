const express = require("express");
const authMiddleware = require("../middlewares/authMiddleware");
const Favorite = require("../models/Favorite");

const router = express.Router();

// üìå –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get("/", authMiddleware, async (req, res) => {
  try {
    const userId = req.user.userId; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π userId
    const favorites = await Favorite.find({ user: userId }).populate({
      path: "book",
      select: "title author year genres",
    });

    console.log("üìå –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", favorites);
    res.json(favorites);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
router.post("/", authMiddleware, async (req, res) => {
  console.log("üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", req.body);

  try {
    const { bookId } = req.body;
    const userId = req.user.userId;

    const existingFavorite = await Favorite.findOne({
      user: userId,
      book: bookId,
    });
    if (existingFavorite) {
      return res.status(400).json({ message: "–ö–Ω–∏–≥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" });
    }

    const favorite = new Favorite({ user: userId, book: bookId });
    await favorite.save();
    console.log("‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", favorite);

    res.status(201).json({ message: "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// üìå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    const userId = req.user.userId; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ `userId` –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω
    const bookId = req.params.id;

    const deleted = await Favorite.findOneAndDelete({
      user: userId,
      book: bookId,
    });

    if (!deleted) {
      return res.status(404).json({ message: "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" });
    }

    res.json({ message: "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
