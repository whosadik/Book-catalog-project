const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const authMiddleware = require("../middlewares/authMiddleware"); // –î–æ–±–∞–≤–ª—è–µ–º middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const { check, validationResult } = require("express-validator");

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || "default_secret_key"; // –ï—Å–ª–∏ .env –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post(
  "/register",
  [
    check("username", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º").not().isEmpty(),
    check("email", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").isEmail(),
    check("password", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤").isLength({
      min: 6,
    }),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      const { username, email, password } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: "–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(password, 10);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é "user"
      const user = new User({
        username,
        email,
        password: hashedPassword,
        role: "user", // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å
      });

      await user.save();

      res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }
);

// üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ª–æ–≥–∏–Ω)
router.post(
  "/login",
  [
    check("email", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").isEmail(),
    check("password", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å").not().isEmpty(),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      const { email, password } = req.body;

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }

      // –°–æ–∑–¥–∞–µ–º JWT-—Ç–æ–∫–µ–Ω
      const token = jwt.sign(
        { userId: user._id, role: user.role },
        JWT_SECRET,
        { expiresIn: "1h" }
      );

      res.json({
        token,
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          role: user.role,
        },
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }
);

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω)
router.get("/profile", authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select("-password");
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω)
router.put("/profile", authMiddleware, async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    let user = await User.findById(req.user.userId);
    if (!user)
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    if (username) user.username = username;
    if (email) user.email = email;
    if (password) {
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
    }

    await user.save();
    res.json({ message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω", user });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
