const express = require("express");
const Review = require("../models/Review");
const Book = require("../models/Book"); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
const authMiddleware = require("../middlewares/authMiddleware");

const router = express.Router();

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–Ω–∏–≥–∏
router.get("/:bookId", async (req, res) => {
  try {
    const reviews = await Review.find({ book: req.params.bookId }).populate(
      "user",
      "username"
    ); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å "userId" –Ω–∞ "user"
    res.json(reviews);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:", err.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤" });
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–¢–û–õ–¨–ö–û –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–ï)
router.post("/", authMiddleware, async (req, res) => {
  try {
    const { book, rating, comment } = req.body;
    const user = req.user.userId; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞
    const bookExists = await Book.findById(book);
    if (!bookExists) {
      return res.status(404).json({ message: "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤
    const existingReview = await Review.findOne({ book, user });
    if (existingReview) {
      return res
        .status(400)
        .json({ message: "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –∫–Ω–∏–≥—É" });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
    const newReview = new Review({ book, user, rating, comment });
    await newReview.save();

    res.status(201).json(newReview);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:", err.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞" });
  }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–¢–û–õ–¨–ö–û –í–õ–ê–î–ï–õ–ï–¶)
router.patch("/:id", authMiddleware, async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);

    if (!review) return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (review.user.toString() !== req.user.userId) {
      return res
        .status(403)
        .json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤" });
    }

    review.rating = req.body.rating || review.rating;
    review.comment = req.body.comment || review.comment;
    await review.save();

    res.json(review);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:", err.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞" });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ (–¢–û–õ–¨–ö–û –í–õ–ê–î–ï–õ–ï–¶ –∏–ª–∏ –ê–î–ú–ò–ù)
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);
    if (!review) return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (
      review.user.toString() !== req.user.userId &&
      req.user.role !== "admin"
    ) {
      return res
        .status(403)
        .json({ message: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ—Ç–∑—ã–≤–∞" });
    }

    await review.deleteOne();
    res.json({ message: "–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:", err.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞" });
  }
});

module.exports = router;
