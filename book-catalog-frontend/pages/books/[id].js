import { useRouter } from "next/router";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  fetchBookById,
  updateBook,
  deleteBook,
  addToFavorites,
  removeFromFavorites,
  fetchFavorites,
  fetchReviews,
  addReview,
  fetchFilteredBooks,
} from "../../utils/api";
import { useState, useEffect } from "react";
import "../../styles/globals.css"; // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏

export default function BookDetailsPage() {
  const router = useRouter();
  const { id } = router.query;
  const queryClient = useQueryClient();
  const token =
    typeof window !== "undefined" ? localStorage.getItem("token") : null;
  const role =
    typeof window !== "undefined" ? localStorage.getItem("role") : null; // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // üîπ –ó–∞–ø—Ä–æ—Å –∫–Ω–∏–≥–∏

  const {
    data: book,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["book", id],
    queryFn: () => fetchBookById(id),
    enabled: !!id,
  });

  // üîπ –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–æ–≤
  const { data: reviews, refetch } = useQuery({
    queryKey: ["reviews", id],
    queryFn: () => fetchReviews(id),
    enabled: !!id,
  });

  // üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞
  const [newReview, setNewReview] = useState({ rating: "", comment: "" });

  const reviewMutation = useMutation({
    mutationFn: async () => {
      if (!token) {
        throw new Error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
      }
      console.log("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞...", { id, ...newReview });

      return addReview(id, newReview.rating, newReview.comment, token);
    },
    onSuccess: () => {
      console.log("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
      setNewReview({ rating: "", comment: "" }); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
    },
    onError: (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:", error.message);
      alert(error.message);
    },
  });

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–Ω–∏–≥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  const [isFavorite, setIsFavorite] = useState(false);

  useEffect(() => {
    const checkFavorites = async () => {
      if (!token) return;

      try {
        const favorites = await fetchFavorites(token);
        setIsFavorite(favorites.some((fav) => fav._id === id));
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", err);
      }
    };

    checkFavorites();
  }, [id, token]);

  // üîπ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞

  const handleAddReview = () => {
    if (!token) return alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    reviewMutation.mutate(newReview);
  };

  // üîπ –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const addMutation = useMutation({
    mutationFn: () => addToFavorites(id, token),
    onSuccess: () => {
      alert("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!");
      setIsFavorite(true);
      queryClient.invalidateQueries(["favorites"]);
    },
  });

  // üîπ –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const removeMutation = useMutation({
    mutationFn: () => removeFromFavorites(id, token),
    onSuccess: () => {
      alert("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!");
      setIsFavorite(false);
    },
  });

  // üîπ –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const updateMutation = useMutation({
    mutationFn: ({ id, data, token }) => updateBook(id, data, token),
    onSuccess: () => {
      alert("–ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
      queryClient.invalidateQueries(["book", id]);
      setEditing(false);
    },
  });

  // üîπ –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const deleteMutation = useMutation({
    mutationFn: ({ id, token }) => deleteBook(id, token),
    onSuccess: () => {
      alert("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞!");
      router.push("/books");
    },
  });

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
  const [editing, setEditing] = useState(false);
  const [updatedData, setUpdatedData] = useState({
    title: "",
    author: "",
    description: "",
  });

  useEffect(() => {
    if (book) {
      setUpdatedData({
        title: book.title || "",
        author: book.author || "",
        description: book.description || "",
      });
    }
  }, [book]);

  const handleUpdate = () => {
    if (!token) return alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    updateMutation.mutate({ id, data: updatedData, token });
  };

  const handleDelete = () => {
    if (!token) return alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?")) {
      deleteMutation.mutate({ id, token });
    }
  };

  // üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleAddToFavorites = () => {
    if (!token) return alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    addMutation.mutate();
  };

  const handleRemoveFromFavorites = () => {
    if (!token) return alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    removeMutation.mutate();
  };

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (isLoading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏</p>;
  if (!book) return <p>–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>;

  return (
    <div class="bookpage">
      <h1>{book.title}</h1>
      <p>{book.author}</p>
      <p>{book.description}</p>

      {/* üîπ –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) */}
      {role === "admin" && (
        <div>
          {editing ? (
            <div>
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                value={updatedData.title}
                onChange={(e) =>
                  setUpdatedData({ ...updatedData, title: e.target.value })
                }
              />
              <input
                type="text"
                placeholder="–ê–≤—Ç–æ—Ä"
                value={updatedData.author}
                onChange={(e) =>
                  setUpdatedData({ ...updatedData, author: e.target.value })
                }
              />
              <textarea
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                value={updatedData.description}
                onChange={(e) =>
                  setUpdatedData({
                    ...updatedData,
                    description: e.target.value,
                  })
                }
              ></textarea>
              <button onClick={handleUpdate}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button onClick={() => setEditing(false)}>‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
          ) : (
            <div>
              <button onClick={() => setEditing(true)}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button onClick={handleDelete}>üóë –£–¥–∞–ª–∏—Ç—å</button>
            </div>
          )}
        </div>
      )}

      {/* üîπ –ö–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
      {isFavorite ? (
        <button onClick={handleRemoveFromFavorites}>
          üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        </button>
      ) : (
        <button onClick={handleAddToFavorites}>‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</button>
      )}

      {/* üîπ –û—Ç–∑—ã–≤—ã */}
      <h2>–û—Ç–∑—ã–≤—ã</h2>
      {Array.isArray(reviews) && reviews.length > 0 ? (
        reviews.map((r) => (
          <div key={r._id}>
            <p>
              <strong>{r.user?.username || "–ê–Ω–æ–Ω–∏–º"}:</strong> {r.comment} ‚≠ê
              {r.rating}
            </p>
          </div>
        ))
      ) : (
        <p>–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
      )}

      {/* üîπ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ */}
      <h3>–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</h3>
      <div class="inputs">
        <input
          class="rating"
          type="number"
          min="1"
          max="5"
          placeholder="–û—Ü–µ–Ω–∫–∞"
          value={newReview.rating}
          onChange={(e) =>
            setNewReview({ ...newReview, rating: parseInt(e.target.value) })
          }
        />
        <input
          class="comment"
          type="text"
          placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          value={newReview.comment}
          onChange={(e) =>
            setNewReview({ ...newReview, comment: e.target.value })
          }
        />
      </div>
      <button onClick={() => reviewMutation.mutate()}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</button>
    </div>
  );
}
