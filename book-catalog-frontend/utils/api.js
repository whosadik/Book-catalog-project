import axios from "axios";

const API_URL = "http://localhost:5000/api";

export const api = axios.create({
  baseURL: API_URL,
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏
export const fetchBooks = async (filters = {}) => {
  const queryParams = new URLSearchParams(filters).toString();
  const response = await api.get(`/books?${queryParams}`);
  return response.data;
};

// üìå –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
export const fetchBookById = async (id) => {
  const response = await api.get(`/books/${id}`);
  return response.data;
};

// üìå –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
export const loginUser = async (email, password) => {
  const response = await api.post("/auth/login", { email, password });
  return response.data;
};

// üìå –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const fetchProfile = async (token) => {
  try {
    const response = await api.get("/auth/profile", {
      headers: { Authorization: `Bearer ${token}` },
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error.response?.data || error);
    throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
  }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateProfile = async (userData, token) => {
  console.log("üì© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:", userData);

  try {
    const response = await api.put("/auth/profile", userData, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
      error.response?.data || error
    );
    throw new Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
  }
};

// üìå –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É
export async function updateBook(id, bookData, token) {
  console.log("üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏:", id);
  console.log("üîπ –ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–∫–µ–Ω:", token); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω

  try {
    const response = await api.patch(`/books/${id}`, bookData, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:", error);
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏");
  }
}

// üìå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É
export async function deleteBook(id, token) {
  console.log("üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏:", id);
  console.log("üîπ –ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–∫–µ–Ω:", token); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω

  try {
    const response = await api.delete(`/books/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:", error);
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏");
  }
}

// üìå –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
export const addToFavorites = async (bookId) => {
  const token = localStorage.getItem("token");

  if (!bookId) {
    console.error("‚õî –û—à–∏–±–∫–∞: bookId –Ω–µ —É–∫–∞–∑–∞–Ω!");
    throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω bookId");
  }

  if (!token) {
    console.error("‚õî –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!");
    throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω");
  }

  console.log("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", { bookId, token });

  try {
    const response = await api.post(
      "/favorites",
      { bookId },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    if (response.data.message === "–ö–Ω–∏–≥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º") {
      console.warn("‚ö†Ô∏è –ö–Ω–∏–≥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º");
      return { success: false, message: "–ö–Ω–∏–≥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" };
    }

    return { success: true, message: "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", error.response.data);
    throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
  }
};

// üìå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
// üìå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export const removeFromFavorites = async (bookId) => {
  const token = localStorage.getItem("token");

  if (!token) throw new Error("‚õî –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!");
  if (!bookId) throw new Error("‚õî –û—à–∏–±–∫–∞: bookId –Ω–µ —É–∫–∞–∑–∞–Ω!");

  console.log("üîπ –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", { bookId, token });

  try {
    const response = await api.delete(`/favorites/${bookId}`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:",
      error.response?.data || error
    );
    throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
  }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
export const fetchFavorites = async (token) => {
  if (!token) {
    console.error("‚õî –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!");
    throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω");
  }

  console.log("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...");

  try {
    const response = await api.get("/favorites", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error.response.data);
    throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
  }
};
// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–Ω–∏–≥–∏
export const fetchReviews = async (id) => {
  const res = await fetch(`${API_URL}/reviews/${id}`);
  const data = await res.json();
  return Array.isArray(data) ? data : []; // ‚úÖ –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
export const addReview = async (bookId, rating, comment, token) => {
  console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤:", { bookId, rating, comment });

  const res = await fetch("http://localhost:5000/api/reviews", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify({ book: bookId, rating, comment }),
  });

  if (!res.ok) {
    const errorData = await res.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", errorData);
    throw new Error(errorData.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞");
  }

  return res.json();
};

export const fetchFilteredBooks = async (filters) => {
  const query = new URLSearchParams(filters).toString();
  const response = await fetch(
    `http://localhost:5000/api/books/filter?${query}`
  );
  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥");
  return response.json();
};
export const addBook = async (book, token) => {
  const res = await fetch("http://localhost:5000/api/books/add", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    },
    body: JSON.stringify(book),
  });

  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏");
  return res.json();
};
